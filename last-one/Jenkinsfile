pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'bilel06/last-one'
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Bilel-lefi/-test-123.git'
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    // Pull the existing Docker image
                    docker.image("${DOCKER_IMAGE}:latest").pull()
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE}:latest").push()
                    }
                }
            }
        }

        stage('Update redeploy-timestamp') {
            steps {
                powershell '''
                    # Obtenir le timestamp actuel au format yyyy-MM-ddTHH:mm:ss
                    $timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ss"
                    Write-Host "Timestamp: $timestamp"  # Debugger le timestamp

                    # Vérifier si le fichier existe
                    $filePath = "last-one/argocd/manifest/deployment.yaml"
                    if (Test-Path $filePath) {
                        Write-Host "Fichier trouvé : $filePath"

                        # Lire et afficher le contenu avant la mise à jour
                        Write-Host "Before update:"
                        Get-Content $filePath | Write-Host

                        # Mettre à jour redeploy-timestamp avec le timestamp
                        (Get-Content $filePath) -replace 'redeploy-timestamp: ".*"', "redeploy-timestamp: `"$timestamp`"" | Set-Content $filePath

                        # Lire et afficher le contenu après la mise à jour
                        Write-Host "After update:"
                        Get-Content $filePath | Write-Host
                    } else {
                        Write-Host "Fichier non trouvé : $filePath"
                    }
                '''
            }
        }
    }
}
